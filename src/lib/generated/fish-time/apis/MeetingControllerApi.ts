/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMeetingDto,
  FishTimePageDtoMeetingDto,
  FishTimeResponseDto,
  MeetingDto,
  UpdateMeetingDto,
} from '../models/index';
import {
    CreateMeetingDtoFromJSON,
    CreateMeetingDtoToJSON,
    FishTimePageDtoMeetingDtoFromJSON,
    FishTimePageDtoMeetingDtoToJSON,
    FishTimeResponseDtoFromJSON,
    FishTimeResponseDtoToJSON,
    MeetingDtoFromJSON,
    MeetingDtoToJSON,
    UpdateMeetingDtoFromJSON,
    UpdateMeetingDtoToJSON,
} from '../models/index';

export interface CreateMeetingRequest {
    createMeetingDto: CreateMeetingDto;
}

export interface DeleteMeetingRequest {
    id: number;
}

export interface EditMeetingRequest {
    updateMeetingDto: UpdateMeetingDto;
}

export interface GetMeetingsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    id?: number;
    searchQuery?: string;
    startTime?: Date;
    endTime?: Date;
    roomId?: number;
    createdBy?: number;
    participants?: Array<number>;
}

/**
 * 
 */
export class MeetingControllerApi extends runtime.BaseAPI {

    /**
     */
    async createMeetingRaw(requestParameters: CreateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeetingDto>> {
        if (requestParameters['createMeetingDto'] == null) {
            throw new runtime.RequiredError(
                'createMeetingDto',
                'Required parameter "createMeetingDto" was null or undefined when calling createMeeting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMeetingDtoToJSON(requestParameters['createMeetingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingDtoFromJSON(jsonValue));
    }

    /**
     */
    async createMeeting(requestParameters: CreateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeetingDto> {
        const response = await this.createMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteMeetingRaw(requestParameters: DeleteMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FishTimeResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMeeting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FishTimeResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteMeeting(requestParameters: DeleteMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FishTimeResponseDto> {
        const response = await this.deleteMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async editMeetingRaw(requestParameters: EditMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeetingDto>> {
        if (requestParameters['updateMeetingDto'] == null) {
            throw new runtime.RequiredError(
                'updateMeetingDto',
                'Required parameter "updateMeetingDto" was null or undefined when calling editMeeting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/patch`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMeetingDtoToJSON(requestParameters['updateMeetingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingDtoFromJSON(jsonValue));
    }

    /**
     */
    async editMeeting(requestParameters: EditMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeetingDto> {
        const response = await this.editMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMeetingsRaw(requestParameters: GetMeetingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FishTimePageDtoMeetingDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['roomId'] != null) {
            queryParameters['roomId'] = requestParameters['roomId'];
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['createdBy'] = requestParameters['createdBy'];
        }

        if (requestParameters['participants'] != null) {
            queryParameters['participants'] = requestParameters['participants'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FishTimePageDtoMeetingDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMeetings(requestParameters: GetMeetingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FishTimePageDtoMeetingDto> {
        const response = await this.getMeetingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
