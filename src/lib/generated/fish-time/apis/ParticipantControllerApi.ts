/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateParticipantDto,
  FishTimeResponseDto,
  ParticipantDto,
} from '../models/index';
import {
    CreateParticipantDtoFromJSON,
    CreateParticipantDtoToJSON,
    FishTimeResponseDtoFromJSON,
    FishTimeResponseDtoToJSON,
    ParticipantDtoFromJSON,
    ParticipantDtoToJSON,
} from '../models/index';

export interface AddParticipantRequest {
    createParticipantDto: CreateParticipantDto;
}

export interface DeleteParticipantRequest {
    userId: number;
    meetingId: number;
}

/**
 * 
 */
export class ParticipantControllerApi extends runtime.BaseAPI {

    /**
     */
    async addParticipantRaw(requestParameters: AddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantDto>> {
        if (requestParameters['createParticipantDto'] == null) {
            throw new runtime.RequiredError(
                'createParticipantDto',
                'Required parameter "createParticipantDto" was null or undefined when calling addParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/participants/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateParticipantDtoToJSON(requestParameters['createParticipantDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantDtoFromJSON(jsonValue));
    }

    /**
     */
    async addParticipant(requestParameters: AddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantDto> {
        const response = await this.addParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteParticipantRaw(requestParameters: DeleteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FishTimeResponseDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteParticipant().'
            );
        }

        if (requestParameters['meetingId'] == null) {
            throw new runtime.RequiredError(
                'meetingId',
                'Required parameter "meetingId" was null or undefined when calling deleteParticipant().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['meetingId'] != null) {
            queryParameters['meetingId'] = requestParameters['meetingId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/participants/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FishTimeResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteParticipant(requestParameters: DeleteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FishTimeResponseDto> {
        const response = await this.deleteParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
