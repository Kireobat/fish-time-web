/* tslint:disable */
/* eslint-disable */
/**
 * OAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoomDto,
  FishTimePageDtoRoomDto,
  FishTimeResponseDto,
  RoomDto,
  UpdateRoomDto,
} from '../models/index';
import {
    CreateRoomDtoFromJSON,
    CreateRoomDtoToJSON,
    FishTimePageDtoRoomDtoFromJSON,
    FishTimePageDtoRoomDtoToJSON,
    FishTimeResponseDtoFromJSON,
    FishTimeResponseDtoToJSON,
    RoomDtoFromJSON,
    RoomDtoToJSON,
    UpdateRoomDtoFromJSON,
    UpdateRoomDtoToJSON,
} from '../models/index';

export interface CreateRoomRequest {
    createRoomDto: CreateRoomDto;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface GetRoomsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    id?: number;
    name?: string;
    minCapacity?: number;
    address?: string;
    activeOnly?: boolean;
}

export interface PatchRoomRequest {
    updateRoomDto: UpdateRoomDto;
}

/**
 * 
 */
export class RoomControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRoomRaw(requestParameters: CreateRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomDto>> {
        if (requestParameters['createRoomDto'] == null) {
            throw new runtime.RequiredError(
                'createRoomDto',
                'Required parameter "createRoomDto" was null or undefined when calling createRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/rooms/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoomDtoToJSON(requestParameters['createRoomDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomDtoFromJSON(jsonValue));
    }

    /**
     */
    async createRoom(requestParameters: CreateRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomDto> {
        const response = await this.createRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FishTimeResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/rooms/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FishTimeResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteRoom(requestParameters: DeleteRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FishTimeResponseDto> {
        const response = await this.deleteRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRoomsRaw(requestParameters: GetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FishTimePageDtoRoomDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['minCapacity'] != null) {
            queryParameters['minCapacity'] = requestParameters['minCapacity'];
        }

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['activeOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FishTimePageDtoRoomDtoFromJSON(jsonValue));
    }

    /**
     */
    async getRooms(requestParameters: GetRoomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FishTimePageDtoRoomDto> {
        const response = await this.getRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchRoomRaw(requestParameters: PatchRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomDto>> {
        if (requestParameters['updateRoomDto'] == null) {
            throw new runtime.RequiredError(
                'updateRoomDto',
                'Required parameter "updateRoomDto" was null or undefined when calling patchRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("github", []);
        }

        const response = await this.request({
            path: `/api/v1/rooms/patch`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoomDtoToJSON(requestParameters['updateRoomDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomDtoFromJSON(jsonValue));
    }

    /**
     */
    async patchRoom(requestParameters: PatchRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomDto> {
        const response = await this.patchRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
